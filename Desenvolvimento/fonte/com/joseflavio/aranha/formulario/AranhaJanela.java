
/*
 *  Copyright (C) 2010-2011 José Flávio de Souza Dias Júnior
 *
 *  This file is part of Aranha - <http://www.joseflavio.com/aranha/>.
 *
 *  Aranha is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  Aranha is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Aranha. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 *  Direitos Autorais Reservados (C) 2010-2011 José Flávio de Souza Dias Júnior
 * 
 *  Este arquivo é parte de Aranha - <http://www.joseflavio.com/aranha/>.
 * 
 *  Aranha é software livre: você pode redistribuí-lo e/ou modificá-lo
 *  sob os termos da Licença Pública Geral GNU conforme publicada pela
 *  Free Software Foundation, tanto a versão 3 da Licença, como
 *  (a seu critério) qualquer versão posterior.
 * 
 *  Aranha é distribuído na expectativa de que seja útil,
 *  porém, SEM NENHUMA GARANTIA; nem mesmo a garantia implícita de
 *  COMERCIABILIDADE ou ADEQUAÇÃO A UMA FINALIDADE ESPECÍFICA. Consulte a
 *  Licença Pública Geral do GNU para mais detalhes.
 * 
 *  Você deve ter recebido uma cópia da Licença Pública Geral do GNU
 *  junto com Aranha. Se não, veja <http://www.gnu.org/licenses/>.
 */

package com.joseflavio.aranha.formulario;

import java.awt.Color;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringTokenizer;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFormattedTextField;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;

/**
 * Interface gráfica que reúne os principais recursos.
 * @author José Flávio de Souza Dias Júnior
 * @version 2011
 */
public class AranhaJanela extends javax.swing.JFrame {

    private static final long serialVersionUID = 1L;
    
	private AranhaJanelaInterface interf;

    /** Creates new form NewJFrame */
    public AranhaJanela( AranhaJanelaInterface interf ) {

        this.interf = interf;
        
        initComponents();

        capInterfaceRede.removeAllItems();
        for( String s : interf.captura_interfaces() ) capInterfaceRede.addItem( s );

        addWindowListener(
            new WindowAdapter(){
                public void windowClosing( WindowEvent e ) {
                    AranhaJanela.this.interf.finalizando();
                }
            }
        );

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        capInterfaceRede = new javax.swing.JComboBox();
        jLabel13 = new javax.swing.JLabel();
        capTamanho = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        capPosTCPDump = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        capDigitos = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        capBytes = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        capPrefixo = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        capDestino = new javax.swing.JLabel();
        capPreTCPDump = new javax.swing.JCheckBox();
        capExecutar = new javax.swing.JButton();
        capParar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel6 = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        anaFocos = new javax.swing.JTable();
        jLabel20 = new javax.swing.JLabel();
        anaUnidadeTempo = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        anaIntervalo = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        anaLeituraEterna = new javax.swing.JCheckBox();
        anaCapturaInicial = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        anaIndiceFinal = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        anaPeriodoInicial = new javax.swing.JFormattedTextField();
        anaPeriodoFinal = new javax.swing.JFormattedTextField();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        anaDestino = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        anaExecutar = new javax.swing.JButton();
        anaRegistroURL = new javax.swing.JCheckBox();
        anaTrafegoGeralMAC = new javax.swing.JCheckBox();
        anaTrafegoRecenteFocosIP = new javax.swing.JCheckBox();
        anaTrafegoRecenteIP = new javax.swing.JCheckBox();
        anaTrafegoDiarioIP = new javax.swing.JCheckBox();
        anaTrafegoGeralIP = new javax.swing.JCheckBox();
        anaResumoDiario = new javax.swing.JCheckBox();
        anaResumoGeral = new javax.swing.JCheckBox();
        anaGraficoDiario = new javax.swing.JCheckBox();
        jPanel5 = new javax.swing.JPanel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel30 = new javax.swing.JLabel();
        grafArquivo = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        grafTitulo = new javax.swing.JTextField();
        grafSerie1 = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        grafSerie2 = new javax.swing.JComboBox();
        grafSerie3 = new javax.swing.JComboBox();
        grafSerie4 = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        grafPodaInicial = new javax.swing.JComboBox();
        grafPodaInicialData = new javax.swing.JFormattedTextField();
        jLabel5 = new javax.swing.JLabel();
        grafPodaFinal = new javax.swing.JComboBox();
        grafPodaFinalData = new javax.swing.JFormattedTextField();
        grafSerie1TRotulo = new javax.swing.JTextField();
        grafSerie2TRotulo = new javax.swing.JTextField();
        grafSerie3TRotulo = new javax.swing.JTextField();
        grafSerie4TRotulo = new javax.swing.JTextField();
        grafVisualizar = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        grafJanela = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        grafIntervalo = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        medTitulo = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        medOrdem = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        medArquivo = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        medFonte = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        medMatriz = new javax.swing.JTextField();
        medVisualizar = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        medIntervalo = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Aranha");
        setIconImages(null);
        setResizable(false);

        jTabbedPane1.setPreferredSize(new java.awt.Dimension(530, 450));

        jPanel3.setPreferredSize(new java.awt.Dimension(500, 330));

        capInterfaceRede.setToolTipText("Interface de rede da qual os pacotes serão capturados.");
        capInterfaceRede.setMaximumSize(new java.awt.Dimension(358, 32767));

        jLabel13.setText("Tamanho (MB):");

        capTamanho.setText("50");
        capTamanho.setToolTipText("Tamanho máximo de um arquivo de captura.");

        jLabel14.setText("Interface de Rede:");

        capPosTCPDump.setSelected(true);
        capPosTCPDump.setText("Pós-Organização");
        capPosTCPDump.setToolTipText("Organiza a numeração dos arquivos de captura.");

        jLabel4.setText("Dígitos do Índice:");

        capDigitos.setText("7");
        capDigitos.setToolTipText("Quantidade de dígitos da numeração de arquivos de captura.");

        jLabel15.setText("Bytes por Pacote:");

        capBytes.setText("140");
        capBytes.setToolTipText("Quantidade máxima de bytes de um pacote que será considerada na captura.");

        jLabel16.setText("Prefixo:");

        capPrefixo.setText("cap");
        capPrefixo.setToolTipText("Prefixo dos arquivos de captura.");

        jLabel17.setText("Destino:");

        capDestino.setText(" ");
        capDestino.setToolTipText("Destino dos arquivos de captura.");
        capDestino.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        capDestino.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                capDestinoMouseClicked(evt);
            }
        });

        capPreTCPDump.setSelected(true);
        capPreTCPDump.setText("Pré-Organização");
        capPreTCPDump.setToolTipText("Prévia organização dos arquivos de captura existentes a fim de evitar substituição.");

        capExecutar.setText("Executar");
        capExecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                capExecutarActionPerformed(evt);
            }
        });

        capParar.setText("Parar");
        capParar.setEnabled(false);
        capParar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                capPararActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel14)
                    .addComponent(jLabel17)
                    .addComponent(jLabel16)
                    .addComponent(jLabel13)
                    .addComponent(jLabel4)
                    .addComponent(jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(capPosTCPDump, javax.swing.GroupLayout.DEFAULT_SIZE, 749, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(capExecutar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(capParar))
                    .addComponent(capBytes, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(capDestino, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(capDigitos, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(capTamanho, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(capPrefixo, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(capPreTCPDump)
                    .addComponent(capInterfaceRede, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(capInterfaceRede, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(capDestino)
                    .addComponent(jLabel17))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(capPrefixo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(capTamanho, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(capDigitos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(capBytes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(capPreTCPDump)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(capPosTCPDump, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(capExecutar)
                    .addComponent(capParar))
                .addContainerGap(141, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Captura", jPanel3);

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jPanel6.setPreferredSize(new java.awt.Dimension(500, 580));

        jLabel19.setText("Focos:");

        anaFocos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Title 1"
            }
        ) {
            private static final long serialVersionUID = 1L;
			@SuppressWarnings("rawtypes")
            Class[] types = new Class [] {
                java.lang.String.class
            };
            @SuppressWarnings("rawtypes")
            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        anaFocos.setToolTipText("Focos dos analisadores. Ex.: 10.0.0.21,!127.*.*.*+192.168.*.*,0001026354FC,eth.tipo=0x8100,vlan=100,mpls=21");
        anaFocos.setTableHeader(null);
        jScrollPane3.setViewportView(anaFocos);

        jLabel20.setText("Unidade de Tempo:");

        anaUnidadeTempo.setText("10");
        anaUnidadeTempo.setToolTipText("Unidade de tempo referencial, em segundos, para os analisadores que geram gráficos.");

        jLabel21.setText("Captura Inicial:");

        anaIntervalo.setText("60");
        anaIntervalo.setToolTipText("Intervalo, em segundos, entre as análises.");

        jLabel22.setText("Índice Final:");

        anaLeituraEterna.setSelected(true);
        anaLeituraEterna.setText("Leitura Eterna");
        anaLeituraEterna.setToolTipText("Determina espera eterna por novos pacotes.");
        anaLeituraEterna.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                anaLeituraEternaItemStateChanged(evt);
            }
        });

        anaCapturaInicial.setText(" ");
        anaCapturaInicial.setToolTipText("Primeiro arquivo de captura a ser analisado.");
        anaCapturaInicial.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        anaCapturaInicial.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                anaCapturaInicialMouseClicked(evt);
            }
        });

        jLabel24.setText("Intervalo:");

        anaIndiceFinal.setEditable(false);
        anaIndiceFinal.setText("-1");
        anaIndiceFinal.setToolTipText("Índice do último arquivo de captura a ser analisado. -1 == indefinido");

        jLabel25.setText("Período:");

        try {
            javax.swing.text.MaskFormatter mascara = new javax.swing.text.MaskFormatter("##/##/#### ##:##:##");
            mascara.setPlaceholderCharacter( '_' );
            anaPeriodoInicial.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(mascara));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        anaPeriodoInicial.setToolTipText("Especifica a data/hora mínima do primeiro pacote a ser analisado.");
        anaPeriodoInicial.setFocusLostBehavior(javax.swing.JFormattedTextField.COMMIT);

        try {
            javax.swing.text.MaskFormatter mascara = new javax.swing.text.MaskFormatter("##/##/#### ##:##:##");
            mascara.setPlaceholderCharacter( '_' );
            anaPeriodoFinal.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(mascara));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        anaPeriodoFinal.setToolTipText("Especifica a data/hora máxima do último pacote a ser analisado.");
        anaPeriodoFinal.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        anaPeriodoFinal.setFocusLostBehavior(javax.swing.JFormattedTextField.COMMIT);

        jLabel26.setText("até");

        jLabel27.setText("Destino:");

        anaDestino.setText(" ");
        anaDestino.setToolTipText("Destino dos relatórios que serão gerados.");
        anaDestino.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        anaDestino.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                anaDestinoMouseClicked(evt);
            }
        });

        jLabel29.setText("Análises:");

        anaExecutar.setText("Executar");
        anaExecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                anaExecutarActionPerformed(evt);
            }
        });

        anaRegistroURL.setSelected(true);
        anaRegistroURL.setText("Registro de cada URL solicitada através de HTTP");
        anaRegistroURL.setToolTipText("Registra todas as URL's solicitadas através de HTTP.");

        anaTrafegoGeralMAC.setText("Tráfego geral de cada MAC");
        anaTrafegoGeralMAC.setToolTipText("Tabela que contém a medição de tráfego de todos os MAC's identificados desde o primeiro arquivo de captura.");

        anaTrafegoRecenteFocosIP.setSelected(true);
        anaTrafegoRecenteFocosIP.setText("Tráfego recente dos focos em relação a cada IP");
        anaTrafegoRecenteFocosIP.setToolTipText("Gera para cada foco uma tabela com a medição de tráfego de todos os IP's que com ele fizeram contato.");

        anaTrafegoRecenteIP.setText("Tráfego recente de cada IP");
        anaTrafegoRecenteIP.setToolTipText("Tabela que contém a medição de tráfego de todos os IP's identificados no último intervalo de análise.");

        anaTrafegoDiarioIP.setSelected(true);
        anaTrafegoDiarioIP.setText("Tráfego diário de cada IP");
        anaTrafegoDiarioIP.setToolTipText("Gera uma tabela com a medição de tráfego de todos os IP's identificados para cada dia analisado.");

        anaTrafegoGeralIP.setText("Tráfego geral de cada IP");
        anaTrafegoGeralIP.setToolTipText("Tabela que contém a medição de tráfego de todos os IP's identificados desde o primeiro arquivo de captura.");

        anaResumoDiario.setSelected(true);
        anaResumoDiario.setText("Resumo diário");
        anaResumoDiario.setToolTipText("Gera um texto de resumo de tráfego para cada dia analisado.");

        anaResumoGeral.setText("Resumo geral");
        anaResumoGeral.setToolTipText("Texto que resume o tráfego medido em todos os arquivos de captura.");

        anaGraficoDiario.setSelected(true);
        anaGraficoDiario.setText("Gráfico diário de cada foco");
        anaGraficoDiario.setToolTipText("Gráfico no qual cada série corresponde ao tráfego em Mbps/Bytes/Pacotes de um foco.");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel29)
                    .addComponent(jLabel21)
                    .addComponent(jLabel25)
                    .addComponent(jLabel22)
                    .addComponent(jLabel24)
                    .addComponent(jLabel19)
                    .addComponent(jLabel27))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(anaExecutar)
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel6Layout.createSequentialGroup()
                            .addComponent(anaIndiceFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(36, 36, 36)
                            .addComponent(anaLeituraEterna))
                        .addGroup(jPanel6Layout.createSequentialGroup()
                            .addComponent(anaPeriodoInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jLabel26)
                            .addGap(18, 18, 18)
                            .addComponent(anaPeriodoFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(anaCapturaInicial, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel6Layout.createSequentialGroup()
                            .addComponent(anaIntervalo, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jLabel20)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(anaUnidadeTempo, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane3, 0, 0, Short.MAX_VALUE)
                        .addComponent(anaDestino, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(anaRegistroURL)
                    .addComponent(anaTrafegoGeralMAC)
                    .addComponent(anaTrafegoRecenteFocosIP)
                    .addComponent(anaTrafegoRecenteIP)
                    .addComponent(anaTrafegoDiarioIP)
                    .addComponent(anaGraficoDiario)
                    .addComponent(anaResumoGeral)
                    .addComponent(anaResumoDiario)
                    .addComponent(anaTrafegoGeralIP))
                .addGap(401, 401, 401))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(anaCapturaInicial)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabel22)
                            .addComponent(anaIndiceFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(anaLeituraEterna)))
                    .addComponent(jLabel21))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel25)
                    .addComponent(anaPeriodoInicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel26)
                    .addComponent(anaPeriodoFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel24)
                    .addComponent(anaIntervalo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20)
                    .addComponent(anaUnidadeTempo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel19)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(anaDestino)
                    .addComponent(jLabel27))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel29)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(anaGraficoDiario)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(anaResumoGeral)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(anaResumoDiario)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(anaTrafegoGeralIP)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(anaTrafegoDiarioIP)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(anaTrafegoRecenteIP)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(anaTrafegoRecenteFocosIP)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(anaTrafegoGeralMAC)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(anaRegistroURL)))
                .addGap(18, 18, 18)
                .addComponent(anaExecutar)
                .addContainerGap(47, Short.MAX_VALUE))
        );

        jScrollPane2.setViewportView(jPanel6);

        jTabbedPane1.addTab("Análise", jScrollPane2);

        jPanel5.setLayout(new java.awt.BorderLayout());

        jPanel1.setPreferredSize(new java.awt.Dimension(500, 600));

        jLabel30.setText("Arquivo:");

        grafArquivo.setText(" ");
        grafArquivo.setToolTipText("Arquivo que contém os dados do gráfico.");
        grafArquivo.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        grafArquivo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                grafArquivoMouseClicked(evt);
            }
        });
        grafArquivo.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                grafArquivoPropertyChange(evt);
            }
        });

        jLabel1.setText("Título:");

        grafTitulo.setToolTipText("Título do gráfico.");

        grafSerie1.setToolTipText("Nome original e cor da primeira série desejada.");
        grafSerie1.setMaximumSize(new java.awt.Dimension(201, 32767));
        grafSerie1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                grafSerie1ItemStateChanged(evt);
            }
        });

        jLabel2.setText("Séries:");

        grafSerie2.setForeground(new java.awt.Color(0, 0, 204));
        grafSerie2.setToolTipText("Nome original e cor da segunda série desejada.");
        grafSerie2.setMaximumSize(new java.awt.Dimension(201, 32767));
        grafSerie2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                grafSerie2ItemStateChanged(evt);
            }
        });

        grafSerie3.setForeground(new java.awt.Color(0, 153, 0));
        grafSerie3.setToolTipText("Nome original e cor da terceira série desejada.");
        grafSerie3.setMaximumSize(new java.awt.Dimension(201, 32767));
        grafSerie3.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                grafSerie3ItemStateChanged(evt);
            }
        });

        grafSerie4.setForeground(new java.awt.Color(204, 0, 0));
        grafSerie4.setToolTipText("Nome original e cor da quarta série desejada.");
        grafSerie4.setMaximumSize(new java.awt.Dimension(201, 32767));
        grafSerie4.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                grafSerie4ItemStateChanged(evt);
            }
        });

        jLabel3.setText("Poda Inicial:");

        grafPodaInicial.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Nenhuma", "Automática", "Específica" }));
        grafPodaInicial.setSelectedIndex(1);
        grafPodaInicial.setToolTipText("Retira o espaço em branco do início do gráfico.");
        grafPodaInicial.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                grafPodaInicialItemStateChanged(evt);
            }
        });

        grafPodaInicialData.setEditable(false);
        try {
            javax.swing.text.MaskFormatter mascara = new javax.swing.text.MaskFormatter("##:##:##");
            mascara.setPlaceholderCharacter( '_' );
            grafPodaInicialData.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(mascara));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        grafPodaInicialData.setToolTipText("Oculta a parte do gráfico até este horário.");
        grafPodaInicialData.setFocusLostBehavior(javax.swing.JFormattedTextField.COMMIT);

        jLabel5.setText("Poda Final:");

        grafPodaFinal.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Nenhuma", "Automática", "Específica" }));
        grafPodaFinal.setSelectedIndex(1);
        grafPodaFinal.setToolTipText("Retira o espaço em branco do fim do gráfico.");
        grafPodaFinal.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                grafPodaFinalItemStateChanged(evt);
            }
        });

        grafPodaFinalData.setEditable(false);
        try {
            javax.swing.text.MaskFormatter mascara = new javax.swing.text.MaskFormatter("##:##:##");
            mascara.setPlaceholderCharacter( '_' );
            grafPodaFinalData.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(mascara));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        grafPodaFinalData.setToolTipText("Oculta a parte do gráfico após este horário.");
        grafPodaFinalData.setFocusLostBehavior(javax.swing.JFormattedTextField.COMMIT);

        grafSerie1TRotulo.setEditable(false);
        grafSerie1TRotulo.setToolTipText("Nome personalizado para a primeira série.");

        grafSerie2TRotulo.setEditable(false);
        grafSerie2TRotulo.setToolTipText("Nome personalizado para a segunda série.");

        grafSerie3TRotulo.setEditable(false);
        grafSerie3TRotulo.setToolTipText("Nome personalizado para a terceira série.");

        grafSerie4TRotulo.setEditable(false);
        grafSerie4TRotulo.setToolTipText("Nome personalizado para a quarta série.");

        grafVisualizar.setText("Visualizar");
        grafVisualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grafVisualizarActionPerformed(evt);
            }
        });

        jLabel6.setText("Janela:");

        grafJanela.setText("0,0,0,0");
        grafJanela.setToolTipText("Posição e tamanho da janela na tela: x,y,largura,altura.");

        jLabel18.setText("Intervalo:");

        grafIntervalo.setText("60");
        grafIntervalo.setToolTipText("Intervalo para atualização, em segundos.");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel18)
                    .addComponent(jLabel6)
                    .addComponent(jLabel5)
                    .addComponent(jLabel3)
                    .addComponent(jLabel30)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(grafVisualizar)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(grafArquivo, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(grafPodaFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(grafPodaInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(grafSerie4, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(grafSerie3, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(grafSerie1, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(grafSerie2, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(grafPodaFinalData, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
                                .addComponent(grafSerie4TRotulo, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
                                .addComponent(grafSerie3TRotulo, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
                                .addComponent(grafSerie2TRotulo, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
                                .addComponent(grafSerie1TRotulo)
                                .addComponent(grafPodaInicialData, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)))
                        .addComponent(grafJanela)
                        .addComponent(grafIntervalo)
                        .addComponent(grafTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(400, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(grafArquivo)
                    .addComponent(jLabel30))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(grafTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(grafSerie1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(grafSerie1TRotulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(grafSerie2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(grafSerie2TRotulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(grafSerie3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(grafSerie3TRotulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(grafSerie4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(grafSerie4TRotulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(grafPodaInicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(grafPodaInicialData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(grafPodaFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(grafPodaFinalData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(grafJanela, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(grafIntervalo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(grafVisualizar)
                .addContainerGap(329, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Gráfico", jPanel1);

        jLabel7.setText("Título:");

        medTitulo.setToolTipText("Título da tabela de medição.");

        jLabel8.setText("Ordem:");

        medOrdem.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "PE - Pacotes Enviados", "PR - Pacotes Recebidos", "BE - Bytes Enviados", "BR - Bytes Recebidos", "PT - Total de Pacotes", "BT - Total de Bytes" }));
        medOrdem.setSelectedIndex(5);
        medOrdem.setToolTipText("Ordem de classificação.");

        jLabel9.setText("Arquivo:");

        medArquivo.setText(" ");
        medArquivo.setToolTipText("Arquivo que contém os dados da medição.");
        medArquivo.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        medArquivo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                medArquivoMouseClicked(evt);
            }
        });

        jLabel10.setText("Fonte:");

        medFonte.setText("18");
        medFonte.setToolTipText("Tamanho da fonte da tabela de medição.");

        jLabel11.setText("Matriz:");

        medMatriz.setText("20,60");
        medMatriz.setToolTipText("O resultado é mostrado numa matriz de caracteres. Defina a quantidade de linhas e colunas.");

        medVisualizar.setText("Visualizar");
        medVisualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                medVisualizarActionPerformed(evt);
            }
        });

        jLabel12.setText("Intervalo:");

        medIntervalo.setText("60");
        medIntervalo.setToolTipText("Intervalo para atualização, em segundos.");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel12)
                    .addComponent(jLabel11)
                    .addComponent(jLabel10)
                    .addComponent(jLabel7)
                    .addComponent(jLabel9)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(medVisualizar)
                    .addComponent(medMatriz, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(medFonte, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(medOrdem, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(medTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(medIntervalo, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(medArquivo, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(394, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(medArquivo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(medTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(medOrdem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(medFonte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(medMatriz, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(medIntervalo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(medVisualizar)
                .addContainerGap(440, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Medição", jPanel2);

        jPanel5.add(jTabbedPane2, java.awt.BorderLayout.PAGE_START);

        jTabbedPane1.addTab("Relatório", jPanel5);

        getContentPane().add(jTabbedPane1, java.awt.BorderLayout.PAGE_START);

        jMenu1.setMnemonic('C');
        jMenu1.setText("Configurações");

        jMenuItem2.setMnemonic('A');
        jMenuItem2.setText("Abrir...");
        jMenuItem2.setToolTipText("Define 100% das configurações de acordo com arquivo externo.");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem6.setMnemonic('P');
        jMenuItem6.setText("Abrir parcial...");
        jMenuItem6.setToolTipText("Define todas as configurações com exceção das especificações de arquivo/diretório.");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem6);

        jMenuItem1.setMnemonic('S');
        jMenuItem1.setText("Salvar...");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu3.setMnemonic('F');
        jMenu3.setText("Ferramentas");

        jMenuItem4.setText("Navegador");
        jMenuItem4.setToolTipText("Visualizar o conteúdo de pacotes capturados.");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem4);

        jMenuItem5.setText("Média");
        jMenuItem5.setToolTipText("Calcular a média de arquivos de gráfico.");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem5);

        jMenuItem7.setText("Controle de Espaço Livre");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem7);

        jMenuBar1.add(jMenu3);

        jMenu2.setMnemonic('A');
        jMenu2.setText("Ajuda");

        jMenuItem3.setText("Sobre");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>

    private void capExecutarActionPerformed(java.awt.event.ActionEvent evt) {                                            
        if( capInterfaceRede.getSelectedItem() == null ) return;
        boolean exito = interf.captura_executar( capInterfaceRede.getSelectedItem().toString(), capDestino.getText(), capPrefixo.getText(), capTamanho.getText(), capDigitos.getText(), capBytes.getText(), capPreTCPDump.isSelected(), capPosTCPDump.isSelected() );
        capExecutar.setEnabled( ! exito );
        capParar.setEnabled( exito );
    }                                           

    private void medVisualizarActionPerformed(java.awt.event.ActionEvent evt) {                                              
        interf.relatorio_medicao_visualizar( medArquivo.getText(), medTitulo.getText(), medOrdem.getSelectedItem().toString().substring( 0, 2 ), medFonte.getText(), medMatriz.getText(), medIntervalo.getText() );
    }                                             

    private void capDestinoMouseClicked(java.awt.event.MouseEvent evt) {                                        
        String arquivo = interf.captura_destino( capDestino.getText() );
        if( arquivo == null || arquivo.length() == 0 ) arquivo = " ";
        capDestino.setText( arquivo );
    }                                       

    private void anaCapturaInicialMouseClicked(java.awt.event.MouseEvent evt) {                                               
        String arquivo = interf.analise_capturaInicial( anaCapturaInicial.getText() );
        if( arquivo == null || arquivo.length() == 0 ) arquivo = " ";
        anaCapturaInicial.setText( arquivo );
    }                                              

    private void anaLeituraEternaItemStateChanged(java.awt.event.ItemEvent evt) {                                                  
        anaIndiceFinal.setEditable( ! anaLeituraEterna.isSelected() );
    }                                                 

    private void anaDestinoMouseClicked(java.awt.event.MouseEvent evt) {                                        
        String arquivo = interf.analise_destino( anaDestino.getText() );
        if( arquivo == null || arquivo.length() == 0 ) arquivo = " ";
        anaDestino.setText( arquivo );
    }                                       

    private void anaExecutarActionPerformed(java.awt.event.ActionEvent evt) {                                            
        List<String> focos = new ArrayList<String>();
        for( int i = 0; i < anaFocos.getRowCount(); i++ ){
            String foco = (String) anaFocos.getValueAt( i, 0 );
            if( foco != null && foco.length() > 0 ) focos.add( foco );
        }
        interf.analise_executar( anaCapturaInicial.getText(), anaIndiceFinal.getText(), anaLeituraEterna.isSelected(), (String) anaPeriodoInicial.getValue(), (String) anaPeriodoFinal.getValue(), anaIntervalo.getText(), anaUnidadeTempo.getText(), focos, anaDestino.getText(), anaGraficoDiario.isSelected(), anaResumoGeral.isSelected(), anaResumoDiario.isSelected(), anaTrafegoGeralIP.isSelected(), anaTrafegoDiarioIP.isSelected(), anaTrafegoRecenteIP.isSelected(), anaTrafegoRecenteFocosIP.isSelected(), anaTrafegoGeralMAC.isSelected(), anaRegistroURL.isSelected() );
    }                                           

    private void grafSerie1ItemStateChanged(java.awt.event.ItemEvent evt) {                                            
        grafSerie1TRotulo.setEditable( grafSerie1.getSelectedIndex() != 0 );
    }                                           

    private void grafSerie2ItemStateChanged(java.awt.event.ItemEvent evt) {                                            
        grafSerie2TRotulo.setEditable( grafSerie2.getSelectedIndex() != 0 );
    }                                           

    private void grafSerie3ItemStateChanged(java.awt.event.ItemEvent evt) {                                            
        grafSerie3TRotulo.setEditable( grafSerie3.getSelectedIndex() != 0 );
    }                                           

    private void grafSerie4ItemStateChanged(java.awt.event.ItemEvent evt) {                                            
        grafSerie4TRotulo.setEditable( grafSerie4.getSelectedIndex() != 0 );
    }                                           

    private void grafPodaInicialItemStateChanged(java.awt.event.ItemEvent evt) {                                                 
        grafPodaInicialData.setEditable( grafPodaInicial.getSelectedIndex() == 2 );
        if( grafPodaInicial.getSelectedIndex() == 1 && grafPodaFinal.getSelectedIndex() != 1 ) grafPodaFinal.setSelectedIndex( 1 );
        if( grafPodaInicial.getSelectedIndex() != 1 && grafPodaFinal.getSelectedIndex() == 1 ) grafPodaFinal.setSelectedIndex( 0 );
        grafPodaFinal.setEnabled( grafPodaInicial.getSelectedIndex() != 1 );
    }                                                

    private void grafPodaFinalItemStateChanged(java.awt.event.ItemEvent evt) {                                               
        grafPodaFinalData.setEditable( grafPodaFinal.getSelectedIndex() == 2 );
        if( grafPodaFinal.getSelectedIndex() == 1 && grafPodaInicial.getSelectedIndex() != 1 ) grafPodaInicial.setSelectedIndex( 1 );
        if( grafPodaFinal.getSelectedIndex() != 1 && grafPodaInicial.getSelectedIndex() == 1 ) grafPodaInicial.setSelectedIndex( 0 );
        grafPodaFinal.setEnabled( grafPodaInicial.getSelectedIndex() != 1 );
    }                                              

    private void grafArquivoMouseClicked(java.awt.event.MouseEvent evt) {                                         
        String arquivo = interf.relatorio_grafico_arquivo( grafArquivo.getText() );
        if( arquivo == null || arquivo.length() == 0 ) arquivo = " ";
        grafArquivo.setText( arquivo );
    }                                        

    private void grafVisualizarActionPerformed(java.awt.event.ActionEvent evt) {                                               

        int[] serieIndice = new int[4];
        Color[] serieCor = new Color[4];
        String[] serieRotulo = new String[4];

        Arrays.fill( serieIndice, -1 );

        serieIndice[0] = grafSerie1.getSelectedIndex() - 1;
        serieIndice[1] = grafSerie2.getSelectedIndex() - 1;
        serieIndice[2] = grafSerie3.getSelectedIndex() - 1;
        serieIndice[3] = grafSerie4.getSelectedIndex() - 1;

        serieCor[0] = grafSerie1.getForeground();
        serieCor[1] = grafSerie2.getForeground();
        serieCor[2] = grafSerie3.getForeground();
        serieCor[3] = grafSerie4.getForeground();

        serieRotulo[0] = grafSerie1TRotulo.getText();
        serieRotulo[1] = grafSerie2TRotulo.getText();
        serieRotulo[2] = grafSerie3TRotulo.getText();
        serieRotulo[3] = grafSerie4TRotulo.getText();

        interf.relatorio_grafico_visualizar( grafArquivo.getText(), grafTitulo.getText(), grafSerie1.getItemCount() - 1, serieIndice, serieCor, serieRotulo, grafPodaInicial.getSelectedIndex() == 1, grafPodaInicial.getSelectedIndex() == 2 ? (String) grafPodaInicialData.getValue() : null, grafPodaFinal.getSelectedIndex() == 2 ? (String) grafPodaFinalData.getValue() : null, grafJanela.getText(), grafIntervalo.getText() );

    }                                              

    private void medArquivoMouseClicked(java.awt.event.MouseEvent evt) {                                        
        String arquivo = interf.relatorio_medicao_arquivo( medArquivo.getText() );
        if( arquivo == null || arquivo.length() == 0 ) arquivo = " ";
        medArquivo.setText( arquivo );
    }                                       

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {                                           

        Map<String, String> conf = interf.sistema_abrirConfiguracao();
        if( conf == null ) return;

        get( anaCapturaInicial, conf, "anaCapturaInicial" );
        get( anaDestino, conf, "anaDestino" );
        get( anaFocos, conf, "anaFocos" );
        get( anaGraficoDiario, conf, "anaGraficoDiario" );
        get( anaIndiceFinal, conf, "anaIndiceFinal" );
        get( anaIntervalo, conf, "anaIntervalo" );
        get( anaLeituraEterna, conf, "anaLeituraEterna" );
        get( anaPeriodoFinal, conf, "anaPeriodoFinal" );
        get( anaPeriodoInicial, conf, "anaPeriodoInicial" );
        get( anaRegistroURL, conf, "anaRegistroURL" );
        get( anaResumoDiario, conf, "anaResumoDiario" );
        get( anaResumoGeral, conf, "anaResumoGeral" );
        get( anaTrafegoDiarioIP, conf, "anaTrafegoDiarioIP" );
        get( anaTrafegoGeralIP, conf, "anaTrafegoGeralIP" );
        get( anaTrafegoGeralMAC, conf, "anaTrafegoGeralMAC" );
        get( anaTrafegoRecenteFocosIP, conf, "anaTrafegoRecenteFocosIP" );
        get( anaTrafegoRecenteIP, conf, "anaTrafegoRecenteIP" );
        get( anaUnidadeTempo, conf, "anaUnidadeTempo" );
        get( capInterfaceRede, conf, "capInterfaceRede" );
        get( capDestino, conf, "capDestino" );
        get( capBytes, conf, "capBytes" );
        get( capDigitos, conf, "capDigitos" );
        get( capPosTCPDump, conf, "capEspacoLivre" );
        get( capPreTCPDump, conf, "capPreTCPDump" );
        get( capPrefixo, conf, "capPrefixo" );
        get( capTamanho, conf, "capTamanho" );
        get( grafArquivo, conf, "grafArquivo" );
        get( grafJanela, conf, "grafJanela" );
        get( grafPodaFinal, conf, "grafPodaFinal" );
        get( grafPodaFinalData, conf, "grafPodaFinalData" );
        get( grafPodaInicial, conf, "grafPodaInicial" );
        get( grafPodaInicialData, conf, "grafPodaInicialData" );
        get( grafSerie1, conf, "grafSerie1" );
        get( grafSerie1TRotulo, conf, "grafSerie1TRotulo" );
        get( grafSerie2, conf, "grafSerie2" );
        get( grafSerie2TRotulo, conf, "grafSerie2TRotulo" );
        get( grafSerie3, conf, "grafSerie3" );
        get( grafSerie3TRotulo, conf, "grafSerie3TRotulo" );
        get( grafSerie4, conf, "grafSerie4" );
        get( grafSerie4TRotulo, conf, "grafSerie4TRotulo" );
        get( grafTitulo, conf, "grafTitulo" );
        get( grafIntervalo, conf, "grafIntervalo" );
        get( medArquivo, conf, "medArquivo" );
        get( medFonte, conf, "medFonte" );
        get( medMatriz, conf, "medMatriz" );
        get( medOrdem, conf, "medOrdem" );
        get( medTitulo, conf, "medTitulo" );
        get( medIntervalo, conf, "medIntervalo" );

    }                                          

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {                                           

        Map<String, String> conf = new HashMap<String, String>( 100 );

        set( anaCapturaInicial, conf, "anaCapturaInicial" );
        set( anaDestino, conf, "anaDestino" );
        set( anaFocos, conf, "anaFocos" );
        set( anaGraficoDiario, conf, "anaGraficoDiario" );
        set( anaIndiceFinal, conf, "anaIndiceFinal" );
        set( anaIntervalo, conf, "anaIntervalo" );
        set( anaLeituraEterna, conf, "anaLeituraEterna" );
        set( anaPeriodoFinal, conf, "anaPeriodoFinal" );
        set( anaPeriodoInicial, conf, "anaPeriodoInicial" );
        set( anaRegistroURL, conf, "anaRegistroURL" );
        set( anaResumoDiario, conf, "anaResumoDiario" );
        set( anaResumoGeral, conf, "anaResumoGeral" );
        set( anaTrafegoDiarioIP, conf, "anaTrafegoDiarioIP" );
        set( anaTrafegoGeralIP, conf, "anaTrafegoGeralIP" );
        set( anaTrafegoGeralMAC, conf, "anaTrafegoGeralMAC" );
        set( anaTrafegoRecenteFocosIP, conf, "anaTrafegoRecenteFocosIP" );
        set( anaTrafegoRecenteIP, conf, "anaTrafegoRecenteIP" );
        set( anaUnidadeTempo, conf, "anaUnidadeTempo" );
        set( capInterfaceRede, conf, "capInterfaceRede" );
        set( capDestino, conf, "capDestino" );
        set( capBytes, conf, "capBytes" );
        set( capDigitos, conf, "capDigitos" );
        set( capPosTCPDump, conf, "capEspacoLivre" );
        set( capPreTCPDump, conf, "capPreTCPDump" );
        set( capPrefixo, conf, "capPrefixo" );
        set( capTamanho, conf, "capTamanho" );
        set( grafArquivo, conf, "grafArquivo" );
        set( grafJanela, conf, "grafJanela" );
        set( grafPodaFinal, conf, "grafPodaFinal" );
        set( grafPodaFinalData, conf, "grafPodaFinalData" );
        set( grafPodaInicial, conf, "grafPodaInicial" );
        set( grafPodaInicialData, conf, "grafPodaInicialData" );
        set( grafSerie1, conf, "grafSerie1" );
        set( grafSerie1TRotulo, conf, "grafSerie1TRotulo" );
        set( grafSerie2, conf, "grafSerie2" );
        set( grafSerie2TRotulo, conf, "grafSerie2TRotulo" );
        set( grafSerie3, conf, "grafSerie3" );
        set( grafSerie3TRotulo, conf, "grafSerie3TRotulo" );
        set( grafSerie4, conf, "grafSerie4" );
        set( grafSerie4TRotulo, conf, "grafSerie4TRotulo" );
        set( grafTitulo, conf, "grafTitulo" );
        set( grafIntervalo, conf, "grafIntervalo" );
        set( medArquivo, conf, "medArquivo" );
        set( medFonte, conf, "medFonte" );
        set( medMatriz, conf, "medMatriz" );
        set( medOrdem, conf, "medOrdem" );
        set( medTitulo, conf, "medTitulo" );
        set( medIntervalo, conf, "medIntervalo" );
        
        interf.sistema_salvarConfiguracao( conf );

    }                                          

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        JOptionPane.showMessageDialog( this, "Aranha - Monitoramento de Rede Ethernet - 2011.10\n\nCopyright (C) 2010-2011 José Flávio de Souza Dias Júnior\nThis program is under the terms of the GNU GPLv3.\nhttp://www.joseflavio.com/aranha/", "Aranha", JOptionPane.INFORMATION_MESSAGE );
    }                                          

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        interf.ferramentaNavegador();
    }                                          

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        interf.ferramentaMedia();
    }                                          

    private void grafArquivoPropertyChange(java.beans.PropertyChangeEvent evt) {                                           

        grafSerie1.removeAllItems(); grafSerie1.addItem( "" );
        grafSerie2.removeAllItems(); grafSerie2.addItem( "" );
        grafSerie3.removeAllItems(); grafSerie3.addItem( "" );
        grafSerie4.removeAllItems(); grafSerie4.addItem( "" );

        for( String s : interf.relatorio_grafico_serie( grafArquivo.getText() ) ){
            grafSerie1.addItem( s );
            grafSerie2.addItem( s );
            grafSerie3.addItem( s );
            grafSerie4.addItem( s );
        }

        grafSerie1TRotulo.setText( "" );
        grafSerie2TRotulo.setText( "" );
        grafSerie3TRotulo.setText( "" );
        grafSerie4TRotulo.setText( "" );

        int total = grafSerie1.getItemCount();
        int i = 1;
        if( i < total ) grafSerie1.setSelectedIndex( i++ );
        if( i < total ) grafSerie2.setSelectedIndex( i++ );
        if( i < total ) grafSerie3.setSelectedIndex( i++ );
        if( i < total ) grafSerie4.setSelectedIndex( i++ );

    }                                          

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {                                           

        Map<String, String> conf = interf.sistema_abrirConfiguracao();
        if( conf == null ) return;

        get( anaFocos, conf, "anaFocos" );
        get( anaGraficoDiario, conf, "anaGraficoDiario" );
        get( anaIndiceFinal, conf, "anaIndiceFinal" );
        get( anaIntervalo, conf, "anaIntervalo" );
        get( anaLeituraEterna, conf, "anaLeituraEterna" );
        get( anaPeriodoFinal, conf, "anaPeriodoFinal" );
        get( anaPeriodoInicial, conf, "anaPeriodoInicial" );
        get( anaRegistroURL, conf, "anaRegistroURL" );
        get( anaResumoDiario, conf, "anaResumoDiario" );
        get( anaResumoGeral, conf, "anaResumoGeral" );
        get( anaTrafegoDiarioIP, conf, "anaTrafegoDiarioIP" );
        get( anaTrafegoGeralIP, conf, "anaTrafegoGeralIP" );
        get( anaTrafegoGeralMAC, conf, "anaTrafegoGeralMAC" );
        get( anaTrafegoRecenteFocosIP, conf, "anaTrafegoRecenteFocosIP" );
        get( anaTrafegoRecenteIP, conf, "anaTrafegoRecenteIP" );
        get( anaUnidadeTempo, conf, "anaUnidadeTempo" );
        get( capInterfaceRede, conf, "capInterfaceRede" );
        get( capBytes, conf, "capBytes" );
        get( capDigitos, conf, "capDigitos" );
        get( capPosTCPDump, conf, "capEspacoLivre" );
        get( capPreTCPDump, conf, "capPreTCPDump" );
        get( capPrefixo, conf, "capPrefixo" );
        get( capTamanho, conf, "capTamanho" );
        get( grafJanela, conf, "grafJanela" );
        get( grafPodaFinal, conf, "grafPodaFinal" );
        get( grafPodaFinalData, conf, "grafPodaFinalData" );
        get( grafPodaInicial, conf, "grafPodaInicial" );
        get( grafPodaInicialData, conf, "grafPodaInicialData" );
        get( grafSerie1, conf, "grafSerie1" );
        get( grafSerie1TRotulo, conf, "grafSerie1TRotulo" );
        get( grafSerie2, conf, "grafSerie2" );
        get( grafSerie2TRotulo, conf, "grafSerie2TRotulo" );
        get( grafSerie3, conf, "grafSerie3" );
        get( grafSerie3TRotulo, conf, "grafSerie3TRotulo" );
        get( grafSerie4, conf, "grafSerie4" );
        get( grafSerie4TRotulo, conf, "grafSerie4TRotulo" );
        get( grafTitulo, conf, "grafTitulo" );
        get( grafIntervalo, conf, "grafIntervalo" );
        get( medFonte, conf, "medFonte" );
        get( medMatriz, conf, "medMatriz" );
        get( medOrdem, conf, "medOrdem" );
        get( medTitulo, conf, "medTitulo" );
        get( medIntervalo, conf, "medIntervalo" );

    }                                          

    private void capPararActionPerformed(java.awt.event.ActionEvent evt) {                                         
        interf.captura_parar();
        capExecutar.setEnabled( true );
        capParar.setEnabled( false );
    }                                        

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        interf.ferramentaControleEspacoLivre();
    }                                          

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AranhaJanela( new AranhaJanelaInteraceImpl() ).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private javax.swing.JLabel anaCapturaInicial;
    private javax.swing.JLabel anaDestino;
    private javax.swing.JButton anaExecutar;
    private javax.swing.JTable anaFocos;
    private javax.swing.JCheckBox anaGraficoDiario;
    private javax.swing.JTextField anaIndiceFinal;
    private javax.swing.JTextField anaIntervalo;
    private javax.swing.JCheckBox anaLeituraEterna;
    private javax.swing.JFormattedTextField anaPeriodoFinal;
    private javax.swing.JFormattedTextField anaPeriodoInicial;
    private javax.swing.JCheckBox anaRegistroURL;
    private javax.swing.JCheckBox anaResumoDiario;
    private javax.swing.JCheckBox anaResumoGeral;
    private javax.swing.JCheckBox anaTrafegoDiarioIP;
    private javax.swing.JCheckBox anaTrafegoGeralIP;
    private javax.swing.JCheckBox anaTrafegoGeralMAC;
    private javax.swing.JCheckBox anaTrafegoRecenteFocosIP;
    private javax.swing.JCheckBox anaTrafegoRecenteIP;
    private javax.swing.JTextField anaUnidadeTempo;
    private javax.swing.JTextField capBytes;
    private javax.swing.JLabel capDestino;
    private javax.swing.JTextField capDigitos;
    private javax.swing.JButton capExecutar;
    private javax.swing.JComboBox capInterfaceRede;
    private javax.swing.JButton capParar;
    private javax.swing.JCheckBox capPosTCPDump;
    private javax.swing.JCheckBox capPreTCPDump;
    private javax.swing.JTextField capPrefixo;
    private javax.swing.JTextField capTamanho;
    private javax.swing.JLabel grafArquivo;
    private javax.swing.JTextField grafIntervalo;
    private javax.swing.JTextField grafJanela;
    private javax.swing.JComboBox grafPodaFinal;
    private javax.swing.JFormattedTextField grafPodaFinalData;
    private javax.swing.JComboBox grafPodaInicial;
    private javax.swing.JFormattedTextField grafPodaInicialData;
    private javax.swing.JComboBox grafSerie1;
    private javax.swing.JTextField grafSerie1TRotulo;
    private javax.swing.JComboBox grafSerie2;
    private javax.swing.JTextField grafSerie2TRotulo;
    private javax.swing.JComboBox grafSerie3;
    private javax.swing.JTextField grafSerie3TRotulo;
    private javax.swing.JComboBox grafSerie4;
    private javax.swing.JTextField grafSerie4TRotulo;
    private javax.swing.JTextField grafTitulo;
    private javax.swing.JButton grafVisualizar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JLabel medArquivo;
    private javax.swing.JTextField medFonte;
    private javax.swing.JTextField medIntervalo;
    private javax.swing.JTextField medMatriz;
    private javax.swing.JComboBox medOrdem;
    private javax.swing.JTextField medTitulo;
    private javax.swing.JButton medVisualizar;
    // End of variables declaration

    public static void get( JTextField campo, Map<String, String> valor, String chave ){
        String v = valor.get( chave );
        campo.setText( v );
    }

    public static void set( JTextField campo, Map<String, String> valor, String chave ){
        valor.put( chave, campo.getText() );
    }

    public static void get( JFormattedTextField campo, Map<String, String> valor, String chave ){
        String v = valor.get( chave );
        if( v != null && v.equals( "---" ) ) v = null;
        campo.setValue( v );
    }

    public static void set( JFormattedTextField campo, Map<String, String> valor, String chave ){
        Object v = campo.getValue();
        valor.put( chave, v != null ? v.toString() : "---" );
    }

    public static void get( JLabel campo, Map<String, String> valor, String chave ){
        String v = valor.get( chave );
        if( v == null ) v = " ";
        campo.setText( v );
    }

    public static void set( JLabel campo, Map<String, String> valor, String chave ){
        valor.put( chave, campo.getText() );
    }

    public static void get( JCheckBox campo, Map<String, String> valor, String chave ){
        String v = valor.get( chave );
        if( v == null || v.length() == 0 ) v = "true";
        campo.setSelected( v.equals( "true" ) );
    }

    public static void set( JCheckBox campo, Map<String, String> valor, String chave ){
        valor.put( chave, campo.isSelected() ? "true" : "false" );
    }

    public static void get( JComboBox campo, Map<String, String> valor, String chave ){
        String v = valor.get( chave );
        if( v == null ){
            if( campo.getItemCount() > 0 ) campo.setSelectedIndex( 0 );
        }else{
            int total = campo.getItemCount();
            for( int i = 0; i < total; i++ ){
                String item = (String) campo.getItemAt( i );
                if( item.equals( v ) ){
                    campo.setSelectedIndex( i );
                    return;
                }
            }
            campo.setSelectedIndex( -1 );
        }
    }

    public static void set( JComboBox campo, Map<String, String> valor, String chave ){
        Object v = campo.getSelectedItem();
        valor.put( chave, v != null ? v.toString() : "" );
    }

    public static void get( JTable campo, Map<String, String> valor, String chave ){
        String v = valor.get( chave );
        int total = campo.getRowCount();
        if( v == null || v.length() == 0 ){
            for( int i = 0; i < total; i++ ) campo.setValueAt( "", i, 0 );
        }else{
            StringTokenizer st = new StringTokenizer( v, "|||" );
            for( int i = 0; i < total; i++ ){
                String linha = st.hasMoreTokens() ? st.nextToken() : "";
                if( linha.equals( "---" ) ) linha = null;
                campo.setValueAt( linha, i, 0 );
            }
        }
    }

    public static void set( JTable campo, Map<String, String> valor, String chave ){
        StringBuilder v = new StringBuilder( 200 );
        int total = campo.getRowCount();
        for( int i = 0; i < total; i++ ){
            if( i > 0 ) v.append( "|||" );
            String linha = (String) campo.getValueAt( i, 0 );
            v.append( linha != null ? linha : "---" );
        }
        valor.put( chave, v.toString() );
    }

}
