
/*
 *  Copyright (C) 2010-2011 José Flávio de Souza Dias Júnior
 *
 *  This file is part of Aranha - <http://www.joseflavio.com/aranha/>.
 *
 *  Aranha is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  Aranha is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Aranha. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 *  Direitos Autorais Reservados (C) 2010-2011 José Flávio de Souza Dias Júnior
 * 
 *  Este arquivo é parte de Aranha - <http://www.joseflavio.com/aranha/>.
 * 
 *  Aranha é software livre: você pode redistribuí-lo e/ou modificá-lo
 *  sob os termos da Licença Pública Geral GNU conforme publicada pela
 *  Free Software Foundation, tanto a versão 3 da Licença, como
 *  (a seu critério) qualquer versão posterior.
 * 
 *  Aranha é distribuído na expectativa de que seja útil,
 *  porém, SEM NENHUMA GARANTIA; nem mesmo a garantia implícita de
 *  COMERCIABILIDADE ou ADEQUAÇÃO A UMA FINALIDADE ESPECÍFICA. Consulte a
 *  Licença Pública Geral do GNU para mais detalhes.
 * 
 *  Você deve ter recebido uma cópia da Licença Pública Geral do GNU
 *  junto com Aranha. Se não, veja <http://www.gnu.org/licenses/>.
 */

/* Generated By:JavaCC: Do not edit this line. AranhaFiltragem.java */
package com.joseflavio.aranha.filtro.javacc;

import com.joseflavio.aranha.*;
import com.joseflavio.aranha.filtro.*;

public class AranhaFiltragem implements AranhaFiltragemConstants {

  final public Filtro parse() throws ParseException {
        Filtro e;
        String op;
        Filtro d;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
      e = filtro();
      break;
    case 26:
      jj_consume_token(26);
      e = parse();
      jj_consume_token(27);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case E:
      case OU:
      case OUEX:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      op = logica();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
        d = filtro();
        break;
      case 26:
        jj_consume_token(26);
        d = parse();
        jj_consume_token(27);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                          e = new LogicaFiltro( e, op, d );
    }
          {return e;}
    
  }

  final private Filtro filtro() throws ParseException {
        Filtro f;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 28:
      jj_consume_token(28);
      f = ip_o();
      break;
    case 29:
      jj_consume_token(29);
      f = ip_d();
      break;
    case 30:
      jj_consume_token(30);
      f = ip_tipo();
      break;
    case 31:
      jj_consume_token(31);
      f = ip_tos();
      break;
    case 32:
      jj_consume_token(32);
      f = eth_o();
      break;
    case 33:
      jj_consume_token(33);
      f = eth_d();
      break;
    case 34:
      jj_consume_token(34);
      f = eth_tipo();
      break;
    case 35:
      jj_consume_token(35);
      f = vlan_pri();
      break;
    case 36:
      jj_consume_token(36);
      f = vlan_cfi();
      break;
    case 37:
    case 38:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 37:
        jj_consume_token(37);
        break;
      case 38:
        jj_consume_token(38);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      f = vlan_id();
      break;
    case 39:
      jj_consume_token(39);
      f = mpls_ttl();
      break;
    case 40:
      jj_consume_token(40);
      f = mpls_bits();
      break;
    case 41:
    case 42:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 41:
        jj_consume_token(41);
        break;
      case 42:
        jj_consume_token(42);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      f = mpls_rotulo();
      break;
    case 43:
      jj_consume_token(43);
      f = tcp_o();
      break;
    case 44:
      jj_consume_token(44);
      f = tcp_d();
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {return f;}
    
  }

  final private String logica() throws ParseException {
        Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case E:
      t = jj_consume_token(E);
      break;
    case OU:
      t = jj_consume_token(OU);
      break;
    case OUEX:
      t = jj_consume_token(OUEX);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {return t.image;}
    
  }

  final private int _int() throws ParseException {
        Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DECIMAL:
      t = jj_consume_token(DECIMAL);
                          {return Integer.parseInt( t.image );}
    case HEXADECIMAL:
      t = jj_consume_token(HEXADECIMAL);
                              {return Integer.parseInt( t.image.substring( 2 ), 16 );}
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    
  }

  final private Filtro ip_o() throws ParseException {
        boolean negacao = false;
        Token t;
        Filtro filtro;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IGUAL:
      jj_consume_token(IGUAL);
      break;
    case DIFERENTE:
      jj_consume_token(DIFERENTE);
                                  negacao = true;
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IPV4:
      t = jj_consume_token(IPV4);
                               filtro = new IP_Filtro( IP.instanciar( t.image ), true );
      break;
    case 29:
      jj_consume_token(29);
                               filtro = new IP_OrigemXDestinoFiltro();
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {return negacao ? new NegacaoFiltro( filtro ) : filtro;}
    
  }

  final private Filtro ip_d() throws ParseException {
        boolean negacao = false;
        Token t;
        Filtro filtro;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IGUAL:
      jj_consume_token(IGUAL);
      break;
    case DIFERENTE:
      jj_consume_token(DIFERENTE);
                                  negacao = true;
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IPV4:
      t = jj_consume_token(IPV4);
                               filtro = new IP_Filtro( IP.instanciar( t.image ), false );
      break;
    case 28:
      jj_consume_token(28);
                               filtro = new IP_OrigemXDestinoFiltro();
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {return negacao ? new NegacaoFiltro( filtro ) : filtro;}
    
  }

  final private Filtro ip_tipo() throws ParseException {
        int t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IGUAL:
      jj_consume_token(IGUAL);
      t = _int();
                                   {return new IP_TipoFiltro( t );}
    case DIFERENTE:
      jj_consume_token(DIFERENTE);
      t = _int();
                                   {return new NegacaoFiltro( new IP_TipoFiltro( t ) );}
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    
  }

  final private Filtro ip_tos() throws ParseException {
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IGUAL:
      jj_consume_token(IGUAL);
      t = jj_consume_token(BYTE);
                                   {return new IP_ToSFiltro( new ToS( t.image ) );}
    case DIFERENTE:
      jj_consume_token(DIFERENTE);
      t = jj_consume_token(BYTE);
                                   {return new NegacaoFiltro( new IP_ToSFiltro( new ToS( t.image ) ) );}
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    
  }

  final private Filtro eth_o() throws ParseException {
        boolean negacao = false;
        Token t;
        Filtro filtro;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IGUAL:
      jj_consume_token(IGUAL);
      break;
    case DIFERENTE:
      jj_consume_token(DIFERENTE);
                                  negacao = true;
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MAC:
      t = jj_consume_token(MAC);
                              filtro = new Ethernet_Filtro( new MAC( t.image ), true );
      break;
    case 33:
      jj_consume_token(33);
                              filtro = new Ethernet_OrigemXDestinoFiltro();
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {return negacao ? new NegacaoFiltro( filtro ) : filtro;}
    
  }

  final private Filtro eth_d() throws ParseException {
        boolean negacao = false;
        Token t;
        Filtro filtro;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IGUAL:
      jj_consume_token(IGUAL);
      break;
    case DIFERENTE:
      jj_consume_token(DIFERENTE);
                                  negacao = true;
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MAC:
      t = jj_consume_token(MAC);
                              filtro = new Ethernet_Filtro( new MAC( t.image ), false );
      break;
    case 32:
      jj_consume_token(32);
                              filtro = new Ethernet_OrigemXDestinoFiltro();
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {return negacao ? new NegacaoFiltro( filtro ) : filtro;}
    
  }

  final private Filtro eth_tipo() throws ParseException {
        int t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IGUAL:
      jj_consume_token(IGUAL);
      t = _int();
                                   {return new Ethernet_TipoFiltro( t );}
    case DIFERENTE:
      jj_consume_token(DIFERENTE);
      t = _int();
                                   {return new NegacaoFiltro( new Ethernet_TipoFiltro( t ) );}
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    
  }

  final private Filtro vlan_id() throws ParseException {
        int t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IGUAL:
      jj_consume_token(IGUAL);
      t = _int();
                                   {return new VLAN_IdFiltro( t );}
    case DIFERENTE:
      jj_consume_token(DIFERENTE);
      t = _int();
                                   {return new NegacaoFiltro( new VLAN_IdFiltro( t ) );}
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    
  }

  final private Filtro vlan_pri() throws ParseException {
        int t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IGUAL:
      jj_consume_token(IGUAL);
      t = _int();
                                   {return new VLAN_PrioridadeFiltro( t );}
    case DIFERENTE:
      jj_consume_token(DIFERENTE);
      t = _int();
                                   {return new NegacaoFiltro( new VLAN_PrioridadeFiltro( t ) );}
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    
  }

  final private Filtro vlan_cfi() throws ParseException {
        int t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IGUAL:
      jj_consume_token(IGUAL);
      t = _int();
                                   {return new VLAN_CFIFiltro( t );}
    case DIFERENTE:
      jj_consume_token(DIFERENTE);
      t = _int();
                                   {return new NegacaoFiltro( new VLAN_CFIFiltro( t ) );}
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    
  }

  final private Filtro mpls_rotulo() throws ParseException {
        int nivel = 0;
        int t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 45:
      jj_consume_token(45);
      nivel = _int();
      jj_consume_token(46);
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IGUAL:
      jj_consume_token(IGUAL);
      t = _int();
                                           {return new MPLS_RotuloFiltro( nivel, t );}
    case DIFERENTE:
      jj_consume_token(DIFERENTE);
      t = _int();
                                           {return new NegacaoFiltro( new MPLS_RotuloFiltro( nivel, t ) );}
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    
  }

  final private Filtro mpls_bits() throws ParseException {
        int nivel = 0;
        int t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 45:
      jj_consume_token(45);
      nivel = _int();
      jj_consume_token(46);
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IGUAL:
      jj_consume_token(IGUAL);
      t = _int();
                                           {return new MPLS_BitsFiltro( nivel, t );}
    case DIFERENTE:
      jj_consume_token(DIFERENTE);
      t = _int();
                                           {return new NegacaoFiltro( new MPLS_BitsFiltro( nivel, t ) );}
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    
  }

  final private Filtro mpls_ttl() throws ParseException {
        int nivel = 0;
        int t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 45:
      jj_consume_token(45);
      nivel = _int();
      jj_consume_token(46);
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IGUAL:
      jj_consume_token(IGUAL);
      t = _int();
                                           {return new MPLS_TTLFiltro( nivel, t );}
    case DIFERENTE:
      jj_consume_token(DIFERENTE);
      t = _int();
                                           {return new NegacaoFiltro( new MPLS_TTLFiltro( nivel, t ) );}
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    
  }

  final private Filtro tcp_o() throws ParseException {
        int t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IGUAL:
      jj_consume_token(IGUAL);
      t = _int();
                                   {return new TCP_PortaFiltro( t, true );}
    case DIFERENTE:
      jj_consume_token(DIFERENTE);
      t = _int();
                                   {return new NegacaoFiltro( new TCP_PortaFiltro( t, true ) );}
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    
  }

  final private Filtro tcp_d() throws ParseException {
        int t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IGUAL:
      jj_consume_token(IGUAL);
      t = _int();
                                   {return new TCP_PortaFiltro( t, false );}
    case DIFERENTE:
      jj_consume_token(DIFERENTE);
      t = _int();
                                   {return new NegacaoFiltro( new TCP_PortaFiltro( t, false ) );}
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    
  }

  /** Generated Token Manager. */
  public AranhaFiltragemTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[31];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xf4000000,0x3800,0xf4000000,0x0,0x0,0xf0000000,0x3800,0x7e0,0x300000,0x60,0x21000000,0x60,0x11000000,0x60,0x60,0x60,0x2000000,0x60,0x2000000,0x60,0x60,0x60,0x60,0x0,0x60,0x0,0x60,0x0,0x60,0x60,0x60,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x1fff,0x0,0x1fff,0x60,0x600,0x1fff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x1,0x0,0x0,0x0,0x0,0x2000,0x0,0x2000,0x0,0x2000,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public AranhaFiltragem(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public AranhaFiltragem(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AranhaFiltragemTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public AranhaFiltragem(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AranhaFiltragemTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public AranhaFiltragem(AranhaFiltragemTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(AranhaFiltragemTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[47];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 31; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 47; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
